╔════════════════════════════════════════════════════════════════════════════════╗
║                    ✅ SONARQUBE SETUP - FINAL CHECKLIST                        ║
║                         macOS NestJS + Expo + tRPC                             ║
╚════════════════════════════════════════════════════════════════════════════════╝

🎯 BEFORE YOU START:
═══════════════════════════════════════════════════════════════════════════════

□ Docker Desktop is installed
  → If not: https://www.docker.com/products/docker-desktop
  
□ Docker Desktop is running
  → Check: Spotlight (Cmd+Space) → Docker → Open
  
□ Your monorepo location is ready
  → Have the path handy: /path/to/your/monorepo

═══════════════════════════════════════════════════════════════════════════════

📋 SETUP CHECKLIST (IN ORDER):
═══════════════════════════════════════════════════════════════════════════════

Step 1: Understand Your Files
  □ Read START_HERE.md (2 min) - Know what you have
  □ Read FILES_OVERVIEW.txt (2 min) - Understand each file

Step 2: Copy Files to Your Monorepo
  □ Copy docker-compose.yml
  □ Copy docker-compose-scanner.yml
  □ Copy sonar-project.properties
  □ Copy setup.sh
  □ Copy all .md files for reference
  
  Command:
  $ cd /path/to/your/monorepo
  $ cp /path/to/outputs/* .
  $ chmod +x setup.sh

Step 3: Customize sonar-project.properties
  □ Open sonar-project.properties in editor
  □ Change sonar.projectKey from "my-monorepo" to your project name
  □ Update sonar.sources if your structure is different
  □ Check sonar.exclusions for your build directories
  
  Example for different structures:
  ├─ apps/api + apps/mobile + packages/trpc
  │  sonar.sources=apps/*/src,packages/*/src
  ├─ root src/ directory
  │  sonar.sources=src
  └─ Other: adjust paths

Step 4: Run Automated Setup
  □ Execute setup.sh
  
  $ ./setup.sh
  
  This script will:
  ✓ Check Docker is running
  ✓ Verify ports are free
  ✓ Start containers
  ✓ Wait for SonarQube to initialize
  ✓ Give you next steps

Step 5: Access SonarQube
  □ Open http://localhost:9000
  □ See login page
  
  Command: open http://localhost:9000

Step 6: Login & Secure
  □ Login with admin / admin
  □ Click Administration (gear icon)
  □ Go to Security → Users
  □ Click 'admin' user
  □ Change password (recommended)

Step 7: Generate Scanner Token
  □ In Administration → Security → Users
  □ Click on 'admin' user again
  □ Click "Generate Tokens"
  □ Name it: "local-scanner"
  □ COPY the token and save it somewhere
  
  Example token: sqp_abc123...xyz789

Step 8: First Scan
  □ Generate coverage in your repo
  
  $ npm run test:coverage
  
  □ Run scanner with your token
  
  $ docker compose -f docker-compose-scanner.yml run sonarqube-scanner \
    -Dsonar.login=YOUR_TOKEN_HERE
  
  Replace YOUR_TOKEN_HERE with your actual token

Step 9: View Results
  □ Go back to http://localhost:9000
  □ Click on your project
  □ Explore the analysis results

═══════════════════════════════════════════════════════════════════════════════

✅ VERIFICATION CHECKLIST (After Setup):
═══════════════════════════════════════════════════════════════════════════════

Run these commands to verify everything works:

□ Docker containers running
  $ docker compose ps
  Expected: Both containers shown as "Up (healthy)"

□ SonarQube web UI responsive
  $ curl http://localhost:9000/api/system/health | jq .
  Expected: {"status":"UP",...}

□ Database connected
  $ docker exec sonarqube-db psql -U sonarqube -d sonarqube -c "SELECT 1;"
  Expected: "1"

□ Can generate token
  ✓ Visit http://localhost:9000 → Admin → Users → admin → Tokens
  ✓ Generate test token
  ✓ Can see token displayed

□ Scanner can run
  $ docker compose -f docker-compose-scanner.yml run sonarqube-scanner -Dsonar.login=YOUR_TOKEN
  Expected: "ANALYSIS SUCCESSFUL"

□ Results visible in UI
  ✓ Visit http://localhost:9000
  ✓ See your project listed
  ✓ Can click and see analysis results

═══════════════════════════════════════════════════════════════════════════════

📊 QUICK REFERENCE DURING USAGE:
═══════════════════════════════════════════════════════════════════════════════

Daily Commands:

  Start SonarQube:
  $ docker compose up -d

  Run Scanner:
  $ docker compose -f docker-compose-scanner.yml run sonarqube-scanner -Dsonar.login=YOUR_TOKEN

  View Logs:
  $ docker compose logs -f sonarqube

  Stop Everything:
  $ docker compose down

  Check Status:
  $ docker compose ps

See COMMANDS.md for more commands and troubleshooting

═══════════════════════════════════════════════════════════════════════════════

🆘 IF SOMETHING DOESN'T WORK:
═══════════════════════════════════════════════════════════════════════════════

Problem: Docker not found
Solution: Install Docker Desktop from https://www.docker.com/products/docker-desktop

Problem: Port 5433 already in use
Solution: 
  $ lsof -i :5433
  $ kill -9 <PID>
  Or edit docker-compose.yml to use port 5434

Problem: SonarQube won't start
Solution:
  $ docker compose down -v
  $ docker compose up -d
  Wait 2 minutes

Problem: Scanner says "Unauthorized"
Solution: Generate new token in UI, use correct token in command

Problem: "Cannot connect to sonarqube:9000"
Solution: Make sure both containers are running: docker compose ps

For more: See README.md Troubleshooting section or COMMANDS.md

═══════════════════════════════════════════════════════════════════════════════

📚 DOCUMENTATION QUICK MAP:
═══════════════════════════════════════════════════════════════════════════════

START_HERE.md           ← You are here, quick overview
FILES_OVERVIEW.txt      ← Visual guide to all files
GETTING_STARTED.md      ← Step by step for first time
README.md               ← Complete detailed guide
COMMANDS.md             ← All commands with examples
WORKSPACES.md           ← Multi-package configurations
.env.example            ← Environment variables (optional)

═══════════════════════════════════════════════════════════════════════════════

🎯 WHAT GETS ANALYZED:
═══════════════════════════════════════════════════════════════════════════════

✅ NestJS Code          - TypeScript backend in apps/api
✅ Expo App             - React Native mobile in apps/mobile
✅ tRPC Code            - Type-safe API in packages/trpc
✅ Shared Types         - TypeScript interfaces
✅ UI Libraries         - React components
✅ Utilities            - Helper functions
✅ Test Coverage        - LCOV reports

═══════════════════════════════════════════════════════════════════════════════

🔐 SECURITY REMINDER:
═══════════════════════════════════════════════════════════════════════════════

This setup uses default credentials (admin/admin) for local development.

For team/production use:
  □ Change admin password immediately
  □ Use strong database password
  □ Store tokens securely
  □ See .env.example for environment variable setup

═══════════════════════════════════════════════════════════════════════════════

💾 DATA PERSISTENCE:
═══════════════════════════════════════════════════════════════════════════════

Your data is stored in Docker volumes (persists between restarts):

  sonarqube_data/       - Analysis results
  sonarqube_logs/       - Server logs
  postgres_data/        - Database

To clear everything (DESTRUCTIVE):
  $ docker compose down -v

═══════════════════════════════════════════════════════════════════════════════

🚀 YOU'RE READY TO GO!
═══════════════════════════════════════════════════════════════════════════════

Next action:

1. Read START_HERE.md if you haven't
2. Copy files to your monorepo
3. Run: ./setup.sh
4. Open: http://localhost:9000
5. Start analyzing! 🎉

═══════════════════════════════════════════════════════════════════════════════

Questions? See the appropriate guide:
  • Getting started → GETTING_STARTED.md
  • Complete info → README.md
  • Commands → COMMANDS.md
  • Multi-workspace → WORKSPACES.md

Happy analyzing! 🚀
